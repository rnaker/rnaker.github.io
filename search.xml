<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac OS下利用Clion开发STM32</title>
      <link href="2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/"/>
      <url>2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-OS下利用Clion开发STM32"><a href="#Mac-OS下利用Clion开发STM32" class="headerlink" title="Mac OS下利用Clion开发STM32"></a>Mac OS下利用Clion开发STM32</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="1、Clion-下载地址"><a href="#1、Clion-下载地址" class="headerlink" title="1、Clion 下载地址"></a>1、Clion <a href="">下载地址</a></h3><h3 id="2、STM32cubeMX-下载地址"><a href="#2、STM32cubeMX-下载地址" class="headerlink" title="2、STM32cubeMX 下载地址"></a>2、STM32cubeMX <a href="">下载地址</a></h3><h3 id="3、arm-none-eabi-gcc-这是用来编译stm32程序的交叉编译工具链，利用Homebrew进行安装"><a href="#3、arm-none-eabi-gcc-这是用来编译stm32程序的交叉编译工具链，利用Homebrew进行安装" class="headerlink" title="3、arm-none-eabi-gcc 这是用来编译stm32程序的交叉编译工具链，利用Homebrew进行安装"></a>3、arm-none-eabi-gcc 这是用来编译stm32程序的交叉编译工具链，利用Homebrew进行安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brew tap ArmMbed/homebrew-formulae<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brew <span class="token function">install</span> arm-none-eabi-gcc<span class="token comment"># 重启terminal，运行以下命令，如果有信息输出就表示安装好了</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arm-none-eabi-gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Openocd-这是用来下载和调试程序用的程序，利用Homebrew进行安装"><a href="#4、Openocd-这是用来下载和调试程序用的程序，利用Homebrew进行安装" class="headerlink" title="4、Openocd 这是用来下载和调试程序用的程序，利用Homebrew进行安装"></a>4、Openocd 这是用来下载和调试程序用的程序，利用Homebrew进行安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brew <span class="token function">install</span> open-ocd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、Stlink-对应着stlink下载器，利用Homebrew进行安装"><a href="#5、Stlink-对应着stlink下载器，利用Homebrew进行安装" class="headerlink" title="5、Stlink 对应着stlink下载器，利用Homebrew进行安装"></a>5、Stlink 对应着stlink下载器，利用Homebrew进行安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brew <span class="token function">install</span> stlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置Clion"><a href="#配置Clion" class="headerlink" title="配置Clion"></a>配置Clion</h2><p>打开Clion，点击Preferences-&gt;Build,Execution,Deployment-&gt;Embedded Development，将两个地址填成你自己的，点击Test后没有问题就行，如下图所示<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/1.png"></p><h2 id="创建Demo工程"><a href="#创建Demo工程" class="headerlink" title="创建Demo工程"></a>创建Demo工程</h2><h3 id="1、用Clion创建新工程的时候选择STM32CubeMX，然后选择项目要保存的路径，点击Creat创建，如下图所示"><a href="#1、用Clion创建新工程的时候选择STM32CubeMX，然后选择项目要保存的路径，点击Creat创建，如下图所示" class="headerlink" title="1、用Clion创建新工程的时候选择STM32CubeMX，然后选择项目要保存的路径，点击Creat创建，如下图所示"></a>1、用Clion创建新工程的时候选择STM32CubeMX，然后选择项目要保存的路径，点击Creat创建，如下图所示</h3><p><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/2.png"></p><h3 id="2、工程创建完成后，会自动创建一个-ioc的文件，点击Open-with-STM32CubeMX，就会自动跳转到STM32CubeMX软件界面，如下图所示"><a href="#2、工程创建完成后，会自动创建一个-ioc的文件，点击Open-with-STM32CubeMX，就会自动跳转到STM32CubeMX软件界面，如下图所示" class="headerlink" title="2、工程创建完成后，会自动创建一个*.ioc的文件，点击Open with STM32CubeMX，就会自动跳转到STM32CubeMX软件界面，如下图所示"></a>2、工程创建完成后，会自动创建一个*.ioc的文件，点击Open with STM32CubeMX，就会自动跳转到STM32CubeMX软件界面，如下图所示</h3><p><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/3.png"></p><h3 id="3、通过STM32CubeMX配置我们所使用的芯片、IO、时钟频率等"><a href="#3、通过STM32CubeMX配置我们所使用的芯片、IO、时钟频率等" class="headerlink" title="3、通过STM32CubeMX配置我们所使用的芯片、IO、时钟频率等"></a>3、通过STM32CubeMX配置我们所使用的芯片、IO、时钟频率等</h3><h4 id="1、选择芯片"><a href="#1、选择芯片" class="headerlink" title="1、选择芯片"></a>1、选择芯片</h4><p>点击下图所示位置，更换芯片<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/4.png"></p><h4 id="2、SYS设置"><a href="#2、SYS设置" class="headerlink" title="2、SYS设置"></a>2、SYS设置</h4><p>System Core-&gt;SYS  在Debug栏选择Serial Wire（如果不配置每次下载程序都需要按复位键）<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/5.png"></p><h4 id="3、RCC配置"><a href="#3、RCC配置" class="headerlink" title="3、RCC配置"></a>3、RCC配置</h4><p>System Core-&gt;RCC  在HSE(High Speed Clock)栏选择Crystal/Ceramic Resonator<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/6.png"></p><h4 id="4、clock配置"><a href="#4、clock配置" class="headerlink" title="4、clock配置"></a>4、clock配置</h4><p>点击Clock Configuration将HCLK改成72MHz（会弹框问你是否选择其他源,确认就ok)<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/7.png"><br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/8.png"></p><h4 id="5、GPIO设置"><a href="#5、GPIO设置" class="headerlink" title="5、GPIO设置"></a>5、GPIO设置</h4><p>对需要使用的引脚进行配置，这里我们以点灯为例，根据电路图，我的开发板LED0接的是PA8，所以对PA8口进行配置。<br>返回Pinout &amp; Configuration界面，在芯片图上找到需要配置的IO口，点击并配置成需要的模式<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/9.png"><br>System Core-&gt;GPIO 点击刚所选的IO口进行详细的配置<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/10.png"></p><h4 id="6、生成代码"><a href="#6、生成代码" class="headerlink" title="6、生成代码"></a>6、生成代码</h4><p>点击Project Manager，输入Project Name（这里必须和Clion中的取名保持一致，这样才能保持路径一致，替换文件），Toolchain / IDE 选择SW¥STM32（很重要），点击GENERATE CODE<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/11.png"></p><h4 id="7、回到工程选择Board-Config-file"><a href="#7、回到工程选择Board-Config-file" class="headerlink" title="7、回到工程选择Board Config file"></a>7、回到工程选择Board Config file</h4><p>选择st_nucleo_f103rb.cfg<br>点击Copy to Project &amp; Use，这个文件可以自己配置一个,供你后续的工程使用<br>::不要点击USE，否则不会生成相应的配置文件::<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/12.png"></p><h4 id="8、修改Board-Config-file"><a href="#8、修改Board-Config-file" class="headerlink" title="8、修改Board Config file"></a>8、修改Board Config file</h4><p>点击st_nucleo_f103rb.cfg，我使用的是stlink-v2，所以修改为stlink-v2<br>注释掉reset_config srst_only，不然后面运行会报错<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/13.png"></p><h4 id="9、点亮LED灯"><a href="#9、点亮LED灯" class="headerlink" title="9、点亮LED灯"></a>9、点亮LED灯</h4><p>在Core-&gt;Src-&gt;main.c中找到while循环处，在里面写上我们的点灯程序<br><img src="/2021/03/20/mac-os-xia-li-yong-clion-kai-fa-stm32/14.png"></p><h4 id="10、编译、运行"><a href="#10、编译、运行" class="headerlink" title="10、编译、运行"></a>10、编译、运行</h4><p>点击小锤子进行编译，出现Build finished 就表示编译成功了<br>将板子接上stlink并连接电脑，点击▶️运行，出现** Programming Finished **就说明已经下载成功了<br>#嵌入式/stm32</p>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/19/hello-world/"/>
      <url>2021/03/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
